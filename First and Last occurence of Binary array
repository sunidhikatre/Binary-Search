Perform binary search twice: once to find the first occurrence of the target by moving end to mid - 1 when a match is found, 
and once to find the last occurrence by moving start to mid + 1.
Track the positions when the target is found and update the result array accordingly.
If the target is not found after both searches, return [-1, -1].

class Solution {
    public int[] searchRange(int[] nums, int k) {
        int start = 0;
        int end = nums.length-1;
        int mid =0;
        int []res = new int[2];

        for(int i=0;i<2;i++) {
            if(res[i] == 0 ){
                res[i] = -1;
            }
        }


        while(start <= end) {
            mid = (start + end)/2;

            if(nums[mid] == k) {
                res[0] = mid;
                end = mid-1;
            } else if(nums[mid] < k) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }

        }

        start =0;
        end = nums.length-1;
        mid = 0;

        while(start <= end) {
            mid = (start + end)/2;

            if(nums[mid] == k) {
                res[1] = mid;
                start = mid + 1;
            } else if(nums[mid] < k) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }

        }

        return res;

    }
}
