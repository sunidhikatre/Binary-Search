Loop through each row of the matrix.
Use binary search (lowerBound) to find the first 1 in the row, assuming the row is sorted.
Calculate the number of ones in the row.
Track the row with the maximum number of ones.
Return the row index and the maximum number of ones found.

class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {
        int count_ones = 0;
        int count_ones_max = 0;
        int m = mat[0].length;
        int index = 0;  // Stores the row index with max ones
        int[] result = new int[2];  // To store both the index and count of ones

        for (int i = 0; i < mat.length; i++) {
            count_ones = m - lowerBound(mat[i], m, 1);  // Count the number of ones in the row
            if (count_ones > count_ones_max) {
                count_ones_max = count_ones;
                index = i;
            }
        }

        result[0] = index;  // Row index with maximum ones
        result[1] = count_ones_max;  // Maximum count of ones in that row
        return result;
    }

    // Binary search to find the lower bound of 1s in a row (assuming rows are sorted)
    int lowerBound(int[] nums, int m, int k) {
        int start = 0;
        int end = m - 1;
        int ans = m;  // Default to m in case no 1 is found
        
        while (start <= end) {
            int mid = (start + end) / 2;

            if (nums[mid] >= k) {
                ans = mid;  // Found a 1 or a higher value
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return ans;  // Returns the index of the first 1
    }
}
