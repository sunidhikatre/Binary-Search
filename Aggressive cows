Question is same as https://leetcode.com/problems/magnetic-force-between-two-balls/

Approach
Sort the positions: This helps in placing magnets efficiently by maintaining the correct order of distances.
Binary search on distance: Start with the minimum possible distance (low = 1) and the maximum possible distance (high = max position - min position).
Check placement feasibility: For each mid-point in the binary search, check if it's possible to place m magnets with at least mid distance.
Update search bounds: If placement is possible, increase the distance (low = mid + 1) to find a larger possible distance, else decrease (high = mid - 1).
Return the result: The maximum feasible distance is stored in ans, which gets updated every time placement is successful.

class Solution {

    boolean canWePlace(int[] position, int dist, int m) {
        int cntMagnets = 1;
        int last = position[0];

        for(int i = 1; i < position.length; i++) {
            if(position[i] - last >= dist) {
                cntMagnets++;
                last = position[i];
            } 
            if(cntMagnets == m){
                return true;
            }
        }
        return false;
    }

    public int maxDistance(int[] position, int m) {
        Arrays.sort(position);
        int n = position.length;
        int ans = 0;

        int low = 1;
        int high = position[n-1] - position[0];

        while(low <= high) {
            int mid = (low + high)/2;
            if(canWePlace(position, mid, m)) {
                ans = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return ans;
    }
}

Initial Setup
Sort position (already sorted): [1, 2, 3, 4, 7].
low = 1 (minimum possible distance).
high = 6 (position[4] - position[0] = 7 - 1).
ans = 0.
Binary Search Loop
1st Iteration
mid = (low + high) / 2 = (1 + 6) / 2 = 3.

Call canWePlace(position, dist = 3, m = 3):

Start with cntMagnets = 1 and last = 1.
Loop through position:
i = 1: position[1] - last = 2 - 1 = 1 < 3 → no magnet placed.
i = 2: position[2] - last = 3 - 1 = 2 < 3 → no magnet placed.
i = 3: position[3] - last = 4 - 1 = 3 >= 3 → Place magnet, cntMagnets = 2, last = 4.
i = 4: position[4] - last = 7 - 4 = 3 >= 3 → Place magnet, cntMagnets = 3, last = 7.
Magnets placed = 3. Return true.
Update ans = mid = 3, low = mid + 1 = 4.

2nd Iteration
mid = (low + high) / 2 = (4 + 6) / 2 = 5.

Call canWePlace(position, dist = 5, m = 3):

Start with cntMagnets = 1 and last = 1.
Loop through position:
i = 1: position[1] - last = 2 - 1 = 1 < 5 → no magnet placed.
i = 2: position[2] - last = 3 - 1 = 2 < 5 → no magnet placed.
i = 3: position[3] - last = 4 - 1 = 3 < 5 → no magnet placed.
i = 4: position[4] - last = 7 - 1 = 6 >= 5 → Place magnet, cntMagnets = 2, last = 7.
Magnets placed = 2. Return false.
Update high = mid - 1 = 4.

3rd Iteration
mid = (low + high) / 2 = (4 + 4) / 2 = 4.

Call canWePlace(position, dist = 4, m = 3):

Start with cntMagnets = 1 and last = 1.
Loop through position:
i = 1: position[1] - last = 2 - 1 = 1 < 4 → no magnet placed.
i = 2: position[2] - last = 3 - 1 = 2 < 4 → no magnet placed.
i = 3: position[3] - last = 4 - 1 = 3 < 4 → no magnet placed.
i = 4: position[4] - last = 7 - 1 = 6 >= 4 → Place magnet, cntMagnets = 2, last = 7.
Magnets placed = 2. Return false.
Update high = mid - 1 = 3.

End of Binary Search
The loop exits when low > high.
Final ans = 3.
Output
Maximum distance between magnets = 3.
