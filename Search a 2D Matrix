Treat the matrix as a flattened sorted 1D array with indices from 0 to n*m - 1.
Use binary search with low = 0 and high = n*m - 1.
Calculate the 2D row and column from the 1D index using row = mid / m and col = mid % m.
If the middle element equals the target, return true; otherwise, adjust low or high based on comparison.
If the target is not found after the loop, return false.

TC:O(log(n * m)).


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;

        int low = 0;
        int high = n * m - 1;

        while(low <= high) {
            int mid = (low + high)/2;
            int row = mid/m;
            int col = mid % m;
            if(matrix[row][col] == target) {
                return true;
            } else if(matrix[row][col] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return false;

    }
}
