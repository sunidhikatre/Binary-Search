The findKRotation function uses binary search to find the number of rotations in a rotated sorted array. It initializes two pointers, start and end, and calculates the mid index in each iteration. 
It checks if the element at mid is smaller than its neighbors to identify the minimum element (pivot).
If the mid element is less than or equal to the end, it narrows the search to the left half; otherwise, it searches in the right half. 
The function returns the index of the minimum element, indicating the number of rotations.


// User function Template for Java

class Solution {
    public int findKRotation(List<Integer> arr) {
        // Code here
        int start = 0;
        int end = arr.size() - 1;
        int n = arr.size();
       
        while(start <= end) {
            int mid = (start + end)/2;
           // System.out.println(mid);
            int next = (mid+1) % n;
            int prev = (mid+n-1) % n;
            
            if(arr.get(mid) < arr.get(prev) && arr.get(mid) < arr.get(next)) {
                return mid;
            } 
            
            if(arr.get(mid) <= arr.get(end)) {
                end = mid-1;
            } else {
                start = mid + 1;
            }
        }
        return 0;
        
    }
}
