Use binary search to find the minimum possible eating speed between 1 and the maximum pile.
For each mid value, calculate the total hours Koko needs to finish the piles at that speed.
Adjust the search range based on whether the total hours exceed or fit within the given limit h.

class Solution {

    int findMaximum(int[] arr, int n) {
        int maxElement = arr[0];  // Initialize the first element as the maximum
        
        for (int i = 1; i < n; i++) {
            if (arr[i] > maxElement) {
                maxElement = arr[i];  // Update the max if a larger element is found
            }
        }
        
        return maxElement;
    }

    int calculateTotalHours(int[] piles, int mid) {
        int totalHours = 0;
        for(int i = 0; i< piles.length; i++){
            totalHours += Math.ceil((double)piles[i]/(double)mid);
        }
        return totalHours;

    }


    public int minEatingSpeed(int[] piles, int h) {
      int start = 1;
      int end = findMaximum(piles, piles.length);

      while(start <= end) {
        int mid = (start + end)/2;

        int totalHrsForKoko = calculateTotalHours(piles, mid);

        if(totalHrsForKoko > h) {
            start = mid + 1;
        } else {
            end = mid -1;
        }
      }
      return start;

    }
}
